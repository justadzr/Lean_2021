--- Will clean up these imports
import tactic
import analysis.calculus.iterated_deriv
import topology.continuous_function.polynomial
import topology.separation
import topology.path_connected
import analysis.complex.basic
import analysis.calculus.tangent_cone
import analysis.normed_space.units
import analysis.asymptotics.asymptotic_equivalent
import analysis.analytic.basic
import geometry.manifold.algebra.smooth_functions
import linear_algebra.finite_dimensional
import analysis.normed_space.inner_product
import topology.metric_space.basic
import topology.continuous_on
import analysis.calculus.formal_multilinear_series

open set complex classical filter asymptotics continuous_linear_map set metric is_open differentiable
open_locale topological_space classical nnreal asymptotics filter ennreal unit_interval

noncomputable theory

--- Some assumptions

theorem holomorph_analytic (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : differentiable_at ‚ÑÇ f z ‚Üî analytic_at ‚ÑÇ f z :=
sorry

theorem smooth_within_at_iff_holomorph_within_at (f : ‚ÑÇ ‚Üí ‚ÑÇ) {s : set ‚ÑÇ} (h : is_open s) : ‚àÄ (z : ‚ÑÇ), (differentiable_within_at ‚ÑÇ f s z ‚Üî times_cont_diff_within_at ‚ÑÇ ‚ä§ f s z):=
sorry

theorem smooth_at_iff_holomorph_at (f : ‚ÑÇ ‚Üí ‚ÑÇ) : ‚àÄ (z : ‚ÑÇ), (differentiable_at ‚ÑÇ f z ‚Üî times_cont_diff_at ‚ÑÇ ‚ä§ f z) :=
sorry

theorem smooth_on_iff_holomorph_on (f : ‚ÑÇ ‚Üí ‚ÑÇ) {s : set ‚ÑÇ} (h : is_open s) : differentiable_on ‚ÑÇ f s ‚Üî times_cont_diff_on ‚ÑÇ ‚ä§ f s := 
sorry

section accuml_pts

--- Need this?
--- def isolated_pt (X : Type*) [topological_space X] (U : set X) (z : X) : Prop :=
--- ‚àÉ (V : set X), is_open V ‚àß U ‚à© (V \ {z}) = ‚àÖ

def accumulation_pt (X : Type*) [topological_space X] (U : set X) (z : X) : Prop :=
‚àÄ (V : set X), V ‚àà (ùìù z) ‚Üí ‚àÉ (v : X), v ‚àà U ‚à© V ‚àß ¬¨ v = z

lemma accumulation_pt_open_inter {X : Type*} [topological_space X] 
{U : set X} {U' : set X} {z : X}
(hU' : is_open U') (HU' : z ‚àà U') (hz : accumulation_pt X U z) :
accumulation_pt X (U ‚à© U') z := Œª V hV,
  (set.inter_assoc U U' V).symm ‚ñ∏ 
  (hz (U' ‚à© V) $ _root_.mem_nhds_iff.mpr $ 
    let ‚ü®t, ht, ht‚ÇÅ, ht‚ÇÇ‚ü© := _root_.mem_nhds_iff.mp hV in 
    ‚ü®U' ‚à© t, ‚ü®set.inter_subset_inter_right U' ht, ‚ü®is_open.inter hU' ht‚ÇÅ, ‚ü®HU', ht‚ÇÇ‚ü©‚ü©‚ü©‚ü©)
--
lemma accumulation_pt_mem_closure {X : Type*} [topological_space X] 
{U : set X} {z : X} (hz : accumulation_pt X U z) :
z ‚àà closure U :=
begin
  rw _root_.mem_closure_iff,
  intros o ho hxo,
  rcases hz o (is_open.mem_nhds ho hxo) with ‚ü®v, hv‚ÇÅ, hv‚ÇÇ‚ü©,
  use v,
  rw set.inter_comm at hv‚ÇÅ,
  exact hv‚ÇÅ,
end

end accuml_pts

section crowded_space

class crowded_space (X : Type*) [t : topological_space X] :=
(is_crowded : ‚àÄ (x : X), ¬¨ t.is_open {x})

lemma crowded_space.def (X : Type*) [t : topological_space X] [cr : crowded_space X] : 
‚àÄ (x : X), ¬¨ t.is_open {x} := cr.is_crowded

lemma mem_frontier (X : Type*) [t : topological_space X] {U : set X} {z : X} : 
z ‚àà frontier U ‚Üí ‚àÄ (V : set X), V ‚àà ùìù z ‚Üí (V ‚à© U ‚â† ‚àÖ ‚àß V \ U ‚â† ‚àÖ) :=
begin
  intros hz,
  rw frontier at hz,
  have h : ‚àÄ (o : set X), is_open o ‚Üí z ‚àà o ‚Üí (o ‚à© U).nonempty := _root_.mem_closure_iff.mp (mem_of_mem_diff hz),
  have h' : ¬¨ (‚àÉ (o : set X) (H : o ‚äÜ U), is_open o ‚àß z ‚àà o) := begin let p := not_mem_of_mem_diff hz, rw [mem_interior] at p, exact p end,
  simp at h',
  intros V hV,
  rcases _root_.mem_nhds_iff.mp hV with ‚ü®V', hV'‚ÇÅ, hV'‚ÇÇ, hV'‚ÇÉ‚ü©,
  split,
  { exact set.nonempty.ne_empty (set.nonempty.mono (set.inter_subset_inter_left _ hV'‚ÇÅ) $ h V' hV'‚ÇÇ hV'‚ÇÉ), },
  {
    by_contra w,
    simp at w,
    rw [diff_eq_empty] at w,
    show false, from (h' V' (set.subset.trans hV'‚ÇÅ w) hV'‚ÇÇ) hV'‚ÇÉ,
  },
end

lemma t1_space_connected_with_two_points_is_crowded (X : Type*) [t : topological_space X] [c : connected_space X] [haus : t1_space X]
(hX : ‚àÄ (x : X), ‚àÉ (y : X), ¬¨ y = x) : ‚àÄ (x : X), ¬¨ t.is_open {x} :=
begin
  by_contra w,
  simp at w,
  rcases w with ‚ü®x, hx‚ü©,
  rcases hX x with ‚ü®y, hy‚ü©,
  have minor‚ÇÅ : is_open {x}·∂ú := is_open_compl_singleton,
  have : set.nonempty {x}·∂ú := begin use y, rw [‚Üê ne.def, ‚Üê mem_compl_singleton_iff] at hy, exact hy, end,
  exact (ne_empty_iff_nonempty.mpr $ nonempty_inter hx (is_open_compl_singleton) (union_compl_self {x}) (set.singleton_nonempty x) this) (set.inter_compl_self {x}),
end

lemma accumulation_pt_of_mem_open_nondiscrete 
(X : Type*) [t : topological_space X] [cr : crowded_space X]
{U : set X} (hU : is_open U) {z : X} (hz : z ‚àà U) :
accumulation_pt X U z := 
begin
  let ht := crowded_space.def X,
  intros V hV,
  rw is_open_iff_forall_mem_open at hU,
  rcases _root_.mem_nhds_iff.mp hV with ‚ü®V', hV'‚ÇÅ, hV'‚ÇÇ, hV'‚ÇÉ‚ü©,
  rcases hU z hz with ‚ü®U', hU'‚ÇÅ, hU'‚ÇÇ, hU'‚ÇÉ‚ü©,
  have : ¬¨ (U' ‚à© V') = {z} := by_contra (Œª h, ht z $ (not_not.mp h) ‚ñ∏ is_open.inter hU'‚ÇÇ hV'‚ÇÇ),
  rw set.ext_iff at this,
  simp at this,
  rcases this with ‚ü®v, hV‚ü©,
  use v,
  rw iff_iff_implies_and_implies at hV,
  cases not_and_distrib.mp hV,
  {
    simp at h,
    exact ‚ü®‚ü®hU'‚ÇÅ h.1, hV'‚ÇÅ h.2.1‚ü©, h.2.2‚ü©,
  },
  {
    simp at h,
    exfalso,
    exact h.2 (h.1.symm ‚ñ∏ hU'‚ÇÉ) (h.1.symm ‚ñ∏ hV'‚ÇÉ),
  },
end

lemma accumulation_pt_of_open_mem_frontier 
{X : Type*} [t : topological_space X] [cr : crowded_space X] {U : set X}
(hU : is_open U) {z : X} (hz : z ‚àà frontier U) :
accumulation_pt X U z := if h : z ‚àà U then accumulation_pt_of_mem_open_nondiscrete X hU h 
else begin
  rw accumulation_pt,
  intros V hV,
  let p := (mem_frontier X hz V hV).1,
  rcases set.nonempty_def.mp (set.ne_empty_iff_nonempty.mp p) with ‚ü®v, hv‚ü©,
  use v,
  have : ¬¨ v = z := begin
    by_contra w,
    rw ‚Üê w at h,
    exact h hv.2,
  end,
  rw set.inter_comm at hv,
  exact ‚ü®hv, this‚ü©,
end

instance complex_plane_crowded_space : crowded_space ‚ÑÇ :=
{
  is_crowded := begin
    have : ‚àÄ (x : ‚ÑÇ), ‚àÉ y, ¬¨ y = x :=
    begin
      intros x,
      by_cases (x = 0),
      {
        use 1, rw h, exact one_ne_zero,
      },
      {
        use 0, intros h', exact h h'.symm,
      },
    end,
    exact t1_space_connected_with_two_points_is_crowded ‚ÑÇ this,
  end
}

end crowded_space

section accuml_pts_homeomorph

lemma mem_image_closure_mem_closure
{X : Type*} [topological_space X] {U : set X} {x : X} (hx : x ‚àà closure U)
{Y : Type*} [topological_space Y] {e : local_homeomorph X Y} (he : x ‚àà e.to_local_equiv.source) :
e x ‚àà closure (e '' U) :=
begin
  rw _root_.mem_closure_iff at hx ‚ä¢,
  intros o ho hxo,
  have : e.is_image (e‚Åª¬π' o) o :=
  begin
    intros y hy,
    split,
    { intros h, exact h, },
    { intros h, exact set.mem_preimage.mp h },
  end,
  let o' := e.to_local_equiv.source ‚à© e‚Åª¬π' o,
  have subkey : x ‚àà o' := ‚ü®he, hxo‚ü©,
  have key : is_open o' := (local_homeomorph.is_image.is_open_iff this).mpr (is_open.inter e.open_target ho),
  rcases hx o' key subkey with ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©,
  rcases hz‚ÇÅ with ‚ü®hz‚ÇÅ‚ÇÅ, hz‚ÇÅ‚ÇÇ‚ü©,
  use e z,
  exact ‚ü®hz‚ÇÅ‚ÇÇ, set.mem_image_of_mem e hz‚ÇÇ‚ü©,
end

lemma mem_closure_inter
{X : Type*} [topological_space X] {U : set X} {x : X} (hx : x ‚àà closure U)
{U' : set X} (hU' : is_open U') (h : x ‚àà U') :
x ‚àà closure (U ‚à© U') :=
begin
  rw _root_.mem_closure_iff at hx ‚ä¢,
  intros o ho hxo,
  specialize hx (o ‚à© U') (is_open.inter ho hU') ‚ü®hxo, h‚ü©,
  rw set.inter_assoc at hx,
  nth_rewrite 1 set.inter_comm at hx,
  exact hx,
end

lemma accumulation_pt_local_homeomorph 
{X : Type*} [topological_space X] {U : set X} {x : X} (hx : accumulation_pt X U x)
{Y : Type*} [topological_space Y] {e : local_homeomorph X Y} (he : x ‚àà e.to_local_equiv.source) :
accumulation_pt Y (e '' U) (e x) :=
begin
  rw accumulation_pt at hx ‚ä¢,
  intros V hV,
  rcases _root_.mem_nhds_iff.mp hV with ‚ü®V', hV'‚ÇÅ, hV'‚ÇÇ, hV'‚ÇÉ‚ü©,
  specialize hx (e.to_local_equiv.source ‚à© e‚Åª¬π' (V' ‚à© e.to_local_equiv.target)),
  have : (e.to_local_equiv.source ‚à© e‚Åª¬π' (V' ‚à© e.to_local_equiv.target)) ‚àà ùìù x :=
  begin
    have minor : is_open (V' ‚à© e.to_local_equiv.target) := is_open.inter hV'‚ÇÇ e.open_target,
    have key : x ‚àà (e‚Åª¬π' (V' ‚à© e.to_local_equiv.target)) := set.mem_preimage.mpr ‚ü®hV'‚ÇÉ, local_equiv.map_source _ he‚ü©,
    refine is_open.mem_nhds _ ‚ü®he, key‚ü©,
    apply local_homeomorph.preimage_open_of_open,
    exact is_open.inter hV'‚ÇÇ e.open_target,
  end,
  rcases hx this with ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü©,
  rcases ha‚ÇÅ with ‚ü®haa, hab‚ü©,
  let p := set.mem_image_of_mem e hab,
  use e a,
  split,
  {
    split, exact set.mem_image_of_mem e haa,
    nth_rewrite 1 set.inter_comm at p,
    rw [‚Üê local_homeomorph.coe_coe, 
        ‚Üê local_equiv.symm_image_target_inter_eq e.to_local_equiv V'] at p,
    have : set.left_inv_on ‚áë(e.to_local_equiv) 
          ‚áë(e.to_local_equiv.symm) e.to_local_equiv.target := 
    begin
      nth_rewrite 0 ‚Üê local_equiv.symm_symm e.to_local_equiv,
      rw [‚Üêlocal_homeomorph.symm_source, local_homeomorph.symm_to_local_equiv],
      exact local_equiv.left_inv_on e.to_local_equiv.symm,
    end,
    rw set.left_inv_on.image_image' this (set.inter_subset_left e.to_local_equiv.target V') at p,
    exact hV'‚ÇÅ p.2,
  },
  rw set.mem_image at p,
  rcases p with ‚ü®b, hb‚ü©,
  rcases hb with ‚ü®left, right‚ü©,
  rcases left with ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©,
  {
    intros w,
    have key : a = b := by rwa [eq_comm, ‚Üêlocal_homeomorph.coe_coe e, 
          set.inj_on.eq_iff (local_equiv.inj_on e.to_local_equiv) hab.1 hb‚ÇÅ] at right,
    rw ‚Üê right at w,
    rw [eq_comm, ‚Üêlocal_homeomorph.coe_coe e, 
        set.inj_on.eq_iff (local_equiv.inj_on e.to_local_equiv) he hb‚ÇÅ] at w,
    rw ‚Üê key at w,
    exact ha‚ÇÇ (eq_comm.mp w),
  },
end

end accuml_pts_homeomorph

section complex_theorems

theorem identity_theorem
{f : ‚ÑÇ ‚Üí ‚ÑÇ} {g : ‚ÑÇ ‚Üí ‚ÑÇ}
{U : set ‚ÑÇ} (hU‚ÇÅ : is_open U) (hU‚ÇÇ : is_connected U)
(hf : differentiable_on ‚ÑÇ f U) (hg : differentiable_on ‚ÑÇ g U)
{s‚ÇÄ : ‚ÑÇ} {S : set ‚ÑÇ} (hS : S ‚äÜ U) (hS' : set.eq_on f g S)
(hs‚ÇÄ : s‚ÇÄ ‚àà S) (hs‚ÇÄ' : accumulation_pt ‚ÑÇ S s‚ÇÄ):
set.eq_on f g U :=
sorry

theorem eq_of_eq_on_open
{f : ‚ÑÇ ‚Üí ‚ÑÇ} {g : ‚ÑÇ ‚Üí ‚ÑÇ}
{U : set ‚ÑÇ} (hU‚ÇÅ : is_open U) (hU‚ÇÇ : is_connected U)
(hf : differentiable_on ‚ÑÇ f U) (hg : differentiable_on ‚ÑÇ g U)
{V : set ‚ÑÇ} (hV‚ÇÅ : is_open V) (hV‚ÇÇ : V.nonempty) (hV‚ÇÉ : set.eq_on f g V) (hV‚ÇÑ : V ‚äÜ U) :
set.eq_on f g U := let ‚ü®v, hv‚ü© := hV‚ÇÇ in 
identity_theorem hU‚ÇÅ hU‚ÇÇ hf hg hV‚ÇÑ hV‚ÇÉ hv $ accumulation_pt_of_mem_open_nondiscrete ‚ÑÇ hV‚ÇÅ hv

theorem open_mapping_complex
{f : ‚ÑÇ ‚Üí ‚ÑÇ}
{U : set ‚ÑÇ} (hU‚ÇÅ : is_open U) (hU‚ÇÇ : is_connected U)
(hf‚ÇÅ : differentiable_on ‚ÑÇ f U)
(hf‚ÇÇ : ‚àÉ (x y : ‚ÑÇ), x ‚àà U ‚àß y ‚àà U ‚àß ¬¨ f x = f y) :
‚àÄ (U' : set ‚ÑÇ), U' ‚äÜ U ‚Üí is_open U' ‚Üí is_open (f '' U'):=
sorry

end complex_theorems

/-
  Trash codes. A bad attempt to prove the identity theorem only assuming some
  standard results
-/

/-
lemma nonvanishing_has_local_expansion
(Œµ : ‚Ñù) {hŒµ : Œµ > 0}
(f : ‚ÑÇ ‚Üí ‚ÑÇ)
(w : ‚ÑÇ)
{hf‚ÇÅ : ‚àÉ (z : ‚ÑÇ), z ‚àà ball w Œµ ‚àß ¬¨f z = 0}
{hf‚ÇÇ : ‚àÄ (z : ‚ÑÇ), z ‚àà ball w Œµ  ‚Üí analytic_at ‚ÑÇ f z} {hf‚ÇÇ : f w = 0}:
‚àÉ (k : ‚Ñï) (r : ‚Ñù) (g : ‚ÑÇ ‚Üí ‚ÑÇ),
k > 0 ‚àß r ‚â§ Œµ ‚àß 0 < r ‚àß
‚àÄ (x : ‚ÑÇ), x ‚àà ball w r ‚Üí f = (Œª x, ((x - w) ^ k) * g x)
‚àß ¬¨ g x = 0 ‚àß analytic_at ‚ÑÇ g x:=
sorry

-- I cannot prove the following theorem neatly. I tried to prove it with some disguting inductions,
-- but Lean's treatments of derivatives are not quite nice in this case. Maybe using g's expansion
-- would be easier. But again, that requires at least one induction.
lemma nonvanishing_iter_deriv_of_nonvanishing
(f : ‚ÑÇ ‚Üí ‚ÑÇ)
(w : ‚ÑÇ)
{hf : analytic_at ‚ÑÇ f w}:
(‚àÉ (k : ‚Ñï),
¬¨ iterated_deriv k f w = 0)
‚Üî (‚àÉ (Œµ : ‚Ñù), 0 < Œµ ‚àß (‚àÄ (z : ‚ÑÇ), z ‚àà ball w Œµ ‚Üí analytic_at ‚ÑÇ f z) 
‚àß (‚àÉ (z : ‚ÑÇ), z ‚àà ball w Œµ ‚àß ¬¨f z = 0)) := 
sorry

lemma nonvanishing_disk_of_continuous
(f : ‚ÑÇ ‚Üí ‚ÑÇ)
(z : ‚ÑÇ) {hf‚ÇÅ : continuous_at f z} {hf‚ÇÇ : ¬¨ f z = 0}:
‚àÉ (Œµ : ‚Ñù),
0 < Œµ ‚àß ‚àÄ (x : ‚ÑÇ), x ‚àà ball z Œµ ‚Üí ¬¨ f x = 0 :=
begin
  have := hf‚ÇÅ,
  rw continuous_at_iff at this,
    let Œµ' := ‚à•f z‚à• / 2,
    rw [‚Üê ne.def, ‚Üê norm_pos_iff] at hf‚ÇÇ,
    have hŒµ' : 0 < ‚à•f z‚à• / 2 := by linarith,
    rcases this Œµ' hŒµ' with ‚ü®Œ¥, hŒ¥, h‚ü©,
    use min Œµ' Œ¥,
    split,
    simp,
    exact ‚ü®hŒµ', hŒ¥‚ü©,
    {
      intros x hx,
      rw [mem_ball', dist_comm] at hx,
      have lt_Œ¥ : dist x z < Œ¥ := lt_of_lt_of_le hx (min_le_right _ _),
      specialize h lt_Œ¥,
      rw [dist_eq_norm, norm_sub_rev] at h,
      have key : 0 < ‚à•f x‚à• :=
        calc ‚à•f x‚à• = ‚à•f z - (f z - f x)‚à• : by simp
        ... ‚â• ‚à•f z‚à• - ‚à•f z - f x‚à• : norm_sub_norm_le _ _
        ... ‚â• ‚à•f z‚à• - Œµ' : begin simp, apply le_of_lt, exact h, end
        ... ‚â• ‚à•f z‚à• - ‚à•f z‚à• / 2 : begin simp, apply le_of_eq, rw ‚Üê norm_eq_abs, end
        ... = ‚à•f z‚à• / 2 : by linarith
        ... > 0 : hŒµ',
      rw [norm_pos_iff] at key,
      exact key,
    },
end

lemma is_open_nonvanishing_of_continuous
(f : ‚ÑÇ ‚Üí ‚ÑÇ)
(U : set ‚ÑÇ) {hU : is_open U}
{hf : ‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí continuous_at f z} : 
is_open {z : ‚ÑÇ | z ‚àà U ‚àß ¬¨ f z = 0} :=
begin
  rw metric.is_open_iff at *,
  dsimp,
  intros z hz,
  rcases hz with ‚ü®hz‚ÇÅ, hz‚ÇÇ‚ü©,
  specialize hU z hz‚ÇÅ,
  specialize hf z hz‚ÇÅ,
  rcases hU with ‚ü®Œ¥, hŒ¥‚ÇÅ, hŒ¥‚ÇÇ‚ü©,
  rcases nonvanishing_disk_of_continuous f z with ‚ü®Œµ, hŒµ‚ÇÅ, hŒµ‚ÇÇ‚ü©,
  assumption',
  use min Œ¥ Œµ,
  split,
  simp at hŒ¥‚ÇÅ,
  exact lt_min hŒ¥‚ÇÅ hŒµ‚ÇÅ,
  rw subset_def,
  dsimp,
  intros x hx,
  have key‚ÇÅ : x ‚àà U := hŒ¥‚ÇÇ ((ball_subset_ball $ min_le_left Œ¥ Œµ) hx),
  have key‚ÇÇ : ¬¨ f x = 0 := hŒµ‚ÇÇ x ((ball_subset_ball $ min_le_right Œ¥ Œµ) hx),
  exact ‚ü®key‚ÇÅ, key‚ÇÇ‚ü©,
end

lemma isolated_zeros_of_nonvanishing
(Œµ : ‚Ñù) {hŒµ : Œµ > 0}
(f : ‚ÑÇ ‚Üí ‚ÑÇ)
(w : ‚ÑÇ)
{hf‚ÇÅ : ‚àÉ (z : ‚ÑÇ), z ‚àà ball w Œµ ‚àß ¬¨f z = 0} 
{hf‚ÇÇ : ‚àÄ (z : ‚ÑÇ), z ‚àà ball w Œµ  ‚Üí analytic_at ‚ÑÇ f z}:
‚àÉ (r : ‚Ñù),
r ‚â§ Œµ ‚àß 0 < r ‚àß
‚àÄ (x : ‚ÑÇ), x ‚àà ball w r ‚Üí ¬¨ x - w = 0 ‚Üí ¬¨ f x = 0:=
begin
  by_cases (f w = 0),
  -- the case where f w = 0; use f's local expansion around w
  {
    rcases nonvanishing_has_local_expansion Œµ f w with ‚ü®k, r, g, H‚ü©,
    rcases H with ‚ü®H‚ÇÅ, H‚ÇÇ, H‚ÇÉ, H‚ÇÑ‚ü©,
    use r,
    split,
    exact H‚ÇÇ,
    {
      split,
      exact H‚ÇÉ,
      {
        intros x hx‚ÇÅ hx‚ÇÇ,
        by_contra h',
        specialize H‚ÇÑ x hx‚ÇÅ,
        rcases H‚ÇÑ with ‚ü®h‚ÇÇ‚ÇÅ, h‚ÇÇ‚ÇÇ, h‚ÇÇ‚ÇÉ‚ü©,
        rw h‚ÇÇ‚ÇÅ at h',
        have key : (x - w) ^ k = 0 ‚à® g x = 0 := eq_zero_or_eq_zero_of_mul_eq_zero h',
        cases key with key‚ÇÅ key‚ÇÇ,
        {
          rw [‚Üê complex.cpow_nat_cast, complex.cpow_eq_zero_iff] at key‚ÇÅ,
          exact hx‚ÇÇ key‚ÇÅ.1,
        },
        {
          exact h‚ÇÇ‚ÇÇ key‚ÇÇ,
        },
      },
    },
    assumption',
  },
  -- the case where f w ‚â† 0; use the continuity of f at w
  {
    specialize hf‚ÇÇ w (mem_ball_self hŒµ),
    rcases nonvanishing_disk_of_continuous f w with ‚ü®r, hr‚ü©,
    assumption',
    use min r Œµ,
    split,
    exact min_le_right _ _,
    split,
    {
      simp,
      exact ‚ü®hr.1, hŒµ‚ü©,
    },
    {
      intros x hx‚ÇÅ hx‚ÇÇ,
      rw [mem_ball'] at hx‚ÇÅ,
      have key : dist w x < r := lt_of_lt_of_le hx‚ÇÅ (min_le_left _ _),
      rw [‚Üê mem_ball'] at key,
      exact hr.2 x key,
    },
    exact analytic_at.continuous_at hf‚ÇÇ,
  },
end

def is_accumulation_point (U : set ‚ÑÇ) (z : ‚ÑÇ) : Prop :=
‚àÄ (V : set ‚ÑÇ), V ‚àà (ùìù z) ‚Üí ‚àÉ (v : ‚ÑÇ), v ‚àà U ‚à© V ‚àß ¬¨ v - z = 0

lemma vanishing_disk_of_accumulation_point
(U : set ‚ÑÇ) {hU : is_open U}
(f : ‚ÑÇ ‚Üí ‚ÑÇ) {hf : ‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí analytic_at ‚ÑÇ f z}
(s‚ÇÄ : ‚ÑÇ) 
{hs‚ÇÄ : is_accumulation_point {s : ‚ÑÇ | f s = 0 ‚àß s ‚àà U} s‚ÇÄ} 
{hs‚ÇÄ' : s‚ÇÄ ‚àà {s : ‚ÑÇ | f s = 0 ‚àß s ‚àà U}}:
‚àÉ (Œµ : ‚Ñù), 0 < Œµ ‚àß ball s‚ÇÄ Œµ ‚äÜ U ‚àß
‚àÄ (z : ‚ÑÇ), z ‚àà ball s‚ÇÄ Œµ ‚Üí f z = 0 :=
begin
  by_contra w,
  simp only [not_exists, not_and] at w,
  dsimp at hs‚ÇÄ',
  rw metric.is_open_iff at hU,
  specialize hU s‚ÇÄ hs‚ÇÄ'.2,
  rcases hU with ‚ü®Œµ, hŒµ‚ÇÅ, hŒµ‚ÇÇ‚ü©,
  specialize w Œµ hŒµ‚ÇÅ hŒµ‚ÇÇ,
  simp only [not_forall] at w,
  rcases w with ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©,
  have hf‚ÇÅ : ‚àÉ (z : ‚ÑÇ), z ‚àà ball s‚ÇÄ Œµ ‚àß ¬¨f z = 0 := ‚ü®z, ‚ü®hz‚ÇÅ, hz‚ÇÇ‚ü©‚ü©,
  have hf‚ÇÇ : ‚àÄ (x : ‚ÑÇ), x ‚àà ball s‚ÇÄ Œµ ‚Üí analytic_at ‚ÑÇ f x := Œª x hx, hf x $ hŒµ‚ÇÇ hx,
  rcases isolated_zeros_of_nonvanishing Œµ f s‚ÇÄ with ‚ü®r, hr‚ÇÅ, hr‚ÇÇ, hr‚ÇÉ‚ü©,
  assumption',
  have : ‚àÉ (v : ‚ÑÇ), v ‚àà {s : ‚ÑÇ | f s = 0 ‚àß s ‚àà U} ‚à© (ball s‚ÇÄ r) ‚àß ¬¨ v - s‚ÇÄ = 0 := 
    hs‚ÇÄ (ball s‚ÇÄ r) (ball_mem_nhds s‚ÇÄ hr‚ÇÇ),
  rcases this with ‚ü®v, hv‚ÇÅ, hv‚ÇÇ‚ü©,
  dsimp at hv‚ÇÅ,
  show false, from (hr‚ÇÉ v hv‚ÇÅ.2 hv‚ÇÇ) hv‚ÇÅ.1.1,
end

theorem vanishing_if_zeros_accumulate
(U : set ‚ÑÇ) {hU‚ÇÅ : is_open U} {hU‚ÇÇ : is_connected U}
(f : ‚ÑÇ ‚Üí ‚ÑÇ) {hf : ‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí analytic_at ‚ÑÇ f z}
(s‚ÇÄ : ‚ÑÇ)
{hs‚ÇÄ : is_accumulation_point {s : ‚ÑÇ | f s = 0 ‚àß s ‚àà U} s‚ÇÄ} 
{hs‚ÇÄ' : s‚ÇÄ ‚àà {s : ‚ÑÇ | f s = 0 ‚àß s ‚àà U}}:
‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí f z = 0:=
begin
  let U‚ÇÅ : set ‚ÑÇ := {z : ‚ÑÇ | z ‚àà U ‚àß ‚àÉ (r : ‚Ñù), 0 < r ‚àß ball z r ‚äÜ U ‚àß ‚àÄ (x : ‚ÑÇ), x ‚àà ball z r ‚Üí f x = 0},
  let U‚ÇÇ : set ‚ÑÇ := {z : ‚ÑÇ | z ‚àà U ‚àß ‚àÉ (k : ‚Ñï), ¬¨ iterated_deriv k f z = 0},
  have h‚ÇÅ : U‚ÇÅ ‚à™ U‚ÇÇ = U :=
  begin
    ext,
    split,
    {
      intro h,
      dsimp at h,
      cases h with H‚ÇÅ H‚ÇÇ,
      exact H‚ÇÅ.1,
      exact H‚ÇÇ.1,
    },
    {
      intro H,
      by_cases (x ‚àà U‚ÇÇ),
      exact (mem_union_right U‚ÇÅ) h,
      {
        by_cases h' : f x = 0,
        {
          have key : is_accumulation_point {s : ‚ÑÇ | f s = 0 ‚àß s ‚àà U} x ‚àß x ‚àà {s : ‚ÑÇ | f s = 0 ‚àß s ‚àà U}:=
          begin
            by_contradiction w,
            rw not_and_distrib at w,
            cases w with w‚ÇÅ w‚ÇÇ,
            {
              -- sorry,
              unfold is_accumulation_point at w‚ÇÅ,
              simp at w‚ÇÅ,
              rcases w‚ÇÅ with ‚ü®U', hU‚ÇÅ', hU‚ÇÇ'‚ü©,
              rw metric.mem_nhds_iff at hU‚ÇÅ',
              rcases hU‚ÇÅ' with ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü©,
              let U'' : set ‚ÑÇ := ball x r ‚à© U,
              have key‚ÇÅ : is_open U'' := is_open.inter metric.is_open_ball hU‚ÇÅ,
              rw metric.is_open_iff at key‚ÇÅ,
              specialize key‚ÇÅ x (mem_inter (mem_ball_self hr‚ÇÅ) H),
              rcases key‚ÇÅ with ‚ü®Œµ, hŒµ‚ÇÅ, hŒµ‚ÇÇ‚ü©,
              let x' : ‚ÑÇ := x + Œµ / 2,
              have key‚ÇÇ : x' ‚àà ball x Œµ := 
              begin 
                simp,
                have : 0 ‚â§ Œµ / 2 := by linarith,
                exact calc dist x' x = ‚à•(x + Œµ / 2) - x‚à• : by rw dist_eq_norm
                  ... = complex.abs ‚Üë(Œµ / 2) : by simp
                  ... = Œµ / 2 : by rw complex.abs_of_nonneg this
                  ... < Œµ : by linarith,
              end,
              have key‚ÇÉ : ¬¨ f x' = 0 :=
              begin
                by_contra w',
                have : x' ‚àà U'' := hŒµ‚ÇÇ key‚ÇÇ,
                simp only [mem_inter_eq] at this,
                specialize hU‚ÇÇ' x' w' this.2 (hr‚ÇÇ this.1),
                have key : ¬¨ x' - x = 0 := begin
                  simp,
                  exact ne_of_gt hŒµ‚ÇÅ,
                end,
                show false, from key hU‚ÇÇ',
              end,
              have : ‚àÉ (Œµ : ‚Ñù), Œµ > 0 ‚àß (‚àÄ (z : ‚ÑÇ), z ‚àà ball x Œµ ‚Üí analytic_at ‚ÑÇ f z) ‚àß ‚àÉ (z : ‚ÑÇ), z ‚àà ball x Œµ ‚àß ¬¨f z = 0 :=
              begin
                use Œµ,
                split,
                exact hŒµ‚ÇÅ,
                split,
                intros z hz, 
                exact hf z (mem_of_mem_inter_right (hŒµ‚ÇÇ hz)),
                exact ‚ü®x', ‚ü®key‚ÇÇ, key‚ÇÉ‚ü©‚ü©,
              end,
              have key‚ÇÑ : x ‚àà U‚ÇÇ :=
              begin
                dsimp,
                split,
                exact H,
                rcases iff.elim_right (nonvanishing_iter_deriv_of_nonvanishing f x) this with ‚ü®k, hk‚ü©,
                use k,
                exact hf x H,
              end, 
              show false, from h key‚ÇÑ,
            },
            {
              simp at w‚ÇÇ,
              show false, from (w‚ÇÇ h') H,
            },
          end,
          rcases vanishing_disk_of_accumulation_point U f x with ‚ü®Œµ, hŒµ‚ÇÅ, hŒµ‚ÇÇ, hŒµ‚ÇÉ‚ü©,
          assumption',
          have : x ‚àà U‚ÇÅ :=
          begin
            dsimp [U‚ÇÅ],
            split,
            exact H,
            {
              use Œµ,
              exact ‚ü®hŒµ‚ÇÅ, ‚ü®hŒµ‚ÇÇ, hŒµ‚ÇÉ‚ü©‚ü©,
            },
          end,
          exact (mem_union_left U‚ÇÇ) this,
          exact key.1,
          exact key.2,
        },
        {
          have key‚ÇÅ : ‚àÉ (k : ‚Ñï), ¬¨ iterated_deriv k f x = 0 := by use 0,
          have key‚ÇÇ : x ‚àà U‚ÇÇ := begin
            simp,
            exact ‚ü®H, key‚ÇÅ‚ü©,
          end,
          exfalso,
          exact h key‚ÇÇ,
        },
      },
    },  
  end,
  have h‚ÇÇ : U‚ÇÅ ‚à© U‚ÇÇ = ‚àÖ :=
  begin
    by_contra,
    rw [‚Üê ne.def, ne_empty_iff_nonempty, nonempty_def] at h,
    rcases h with ‚ü®x, hx‚ü©,
    dsimp at hx,
    rcases iff.elim_left (nonvanishing_iter_deriv_of_nonvanishing f x) hx.2.2 with ‚ü®Œµ, hŒµ‚ÇÅ, hŒµ‚ÇÇ, hŒµ‚ÇÉ‚ü©,
    rcases isolated_zeros_of_nonvanishing Œµ f x with ‚ü®r, hr‚ÇÅ, hr‚ÇÇ, hr‚ÇÉ‚ü©,
    assumption',
    swap,
    exact hf x hx.1.1,
    rcases hx.1.2 with ‚ü®r', hr‚ÇÅ', hr‚ÇÇ', hr‚ÇÉ'‚ü©,
    let r'' : ‚Ñù := min r r',
    have minor‚ÇÅ : 0 < r'' := 
    begin
      rw lt_min_iff,
      exact ‚ü®hr‚ÇÇ, gt.lt hr‚ÇÅ'‚ü©,
    end,
    have minor‚ÇÇ : ‚àÉ (x' : ‚ÑÇ), x' ‚àà ball x r'' ‚àß ¬¨ x' - x = 0 := 
    begin
      let x' : ‚ÑÇ := x + r'' / 2,
      use x',
      split,
      simp only [metric.mem_ball],
      have : 0 ‚â§ r'' / 2 := by linarith,
      exact calc dist x' x = ‚à•(x + r'' / 2) - x‚à• : by rw dist_eq_norm
        ... = complex.abs ‚Üë(r'' / 2) : by simp
        ... = r'' / 2 : by rw complex.abs_of_nonneg this
        ... < r'' : by linarith,
      simp,
      exact ne_of_gt minor‚ÇÅ,
    end,
    rcases minor‚ÇÇ with ‚ü®x', hx‚ÇÅ', hx‚ÇÇ'‚ü©,
    have key‚ÇÅ : f x' = 0 := hr‚ÇÉ' x' ((ball_subset_ball (min_le_right r r')) hx‚ÇÅ'),
    have key‚ÇÇ : ¬¨ f x' = 0 := hr‚ÇÉ x' ((ball_subset_ball (min_le_left r r')) hx‚ÇÅ') hx‚ÇÇ',
    show false, from key‚ÇÇ key‚ÇÅ,
  end,
  have h‚ÇÉ : is_open U‚ÇÅ :=
  begin
    rw metric.is_open_iff,
    intros x hx,
    dsimp at hx,
    rcases hx with ‚ü®hx‚ÇÅ, Œµ, hŒµ‚ÇÅ, hŒµ‚ÇÇ, hŒµ‚ÇÉ‚ü©,
    use Œµ,
    split,
    exact hŒµ‚ÇÅ,
    intros z hz,
    dsimp,
    split,
    exact hŒµ‚ÇÇ hz,
    have : ‚àÉ (r : ‚Ñù), (0 < r ‚àß ball z r ‚äÜ U) ‚àß ball z r ‚äÜ ball x Œµ :=
    begin
      have key : is_open (ball x Œµ) := is_open_ball,
      rw metric.is_open_iff at key,
      specialize key z hz,
      rcases key with ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü©,
      use r,
      split,
      exact ‚ü®hr‚ÇÅ, subset.trans hr‚ÇÇ hŒµ‚ÇÇ‚ü©,
      exact hr‚ÇÇ,
    end,
    rcases this with ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü©,
    use r,
    split,
    exact hr‚ÇÅ.1,
    split,
    exact hr‚ÇÅ.2,
    intros x' hx',
    exact hŒµ‚ÇÉ x' (hr‚ÇÇ hx'),
  end,
  have h‚ÇÑ : is_open U‚ÇÇ :=
  begin
    sorry,   
  end,
  have h‚ÇÖ : U‚ÇÅ.nonempty :=
  begin
    rw nonempty_def,
    use s‚ÇÄ,
    dsimp,
    simp at hs‚ÇÄ',
    split,
    exact hs‚ÇÄ'.2,
    rcases vanishing_disk_of_accumulation_point U f s‚ÇÄ with ‚ü®Œµ, hŒµ‚ÇÅ, hŒµ‚ÇÇ, hŒµ‚ÇÉ‚ü©,
    assumption',
    use Œµ,
    exact ‚ü®hŒµ‚ÇÅ, ‚ü®hŒµ‚ÇÇ, hŒµ‚ÇÉ‚ü©‚ü©,
  end,
  have hfinal : U‚ÇÅ = U :=
  begin
    have : is_preconnected U := is_connected.is_preconnected hU‚ÇÇ,
    rw is_preconnected_iff_subset_of_disjoint at this,
    specialize this U‚ÇÅ U‚ÇÇ h‚ÇÉ h‚ÇÑ (eq.subset (eq.symm h‚ÇÅ)),
    have minor : U ‚à© (U‚ÇÅ ‚à© U‚ÇÇ) = ‚àÖ := 
    begin
      rw h‚ÇÇ,
      simp,
    end,
    specialize this minor,
    cases this,
    {
      have minor' : U‚ÇÅ ‚äÜ U :=
      begin
        let h := set.subset_union_left U‚ÇÅ U‚ÇÇ,
        rw h‚ÇÅ at h,
        exact h,
      end,
      exact has_subset.subset.antisymm minor' this,
    },
    {
      have minor‚ÇÅ : U‚ÇÅ ‚äÜ U :=
      begin
        let h := set.subset_union_left U‚ÇÅ U‚ÇÇ,
        rw h‚ÇÅ at h,
        exact h,
      end,
      have minor‚ÇÇ : U‚ÇÇ ‚äÜ U :=
      begin
        let h := set.subset_union_right U‚ÇÅ U‚ÇÇ,
        rw h‚ÇÅ at h,
        exact h,
      end,
      have minor‚ÇÉ : U‚ÇÇ = U := has_subset.subset.antisymm minor‚ÇÇ this,
      have key : U‚ÇÅ = ‚àÖ :=
      begin
        rw [inter_comm, ‚Üê set.subset_empty_iff, ‚Üê set.diff_eq_self] at h‚ÇÇ,
        rw ‚Üê h‚ÇÇ,
        by_contra w,
        rw [‚Üê ne.def, set.ne_empty_iff_nonempty, set.nonempty_diff, minor‚ÇÉ] at w,
        show false, from w minor‚ÇÅ,
      end,
      rw [‚Üê set.not_nonempty_iff_eq_empty] at key,
      exfalso,
      exact key h‚ÇÖ,
    },
  end,
  intros z hz,
  have : z ‚àà U‚ÇÅ := (eq.subset (eq.symm hfinal)) hz,
  dsimp at this,
  rcases this.2 with ‚ü®r, hr‚ÇÅ, hr‚ÇÇ, hr‚ÇÉ‚ü©,
  specialize hr‚ÇÉ z (mem_ball_self hr‚ÇÅ),
  exact hr‚ÇÉ,
end

theorem eq_if_eq_points_accumulate
(U : set ‚ÑÇ) {hU‚ÇÅ : is_open U} {hU‚ÇÇ : is_connected U}
(f : ‚ÑÇ ‚Üí ‚ÑÇ) {hf : ‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí analytic_at ‚ÑÇ f z}
(g : ‚ÑÇ ‚Üí ‚ÑÇ) {hg : ‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí analytic_at ‚ÑÇ g z}
(s‚ÇÄ : ‚ÑÇ)
{hs‚ÇÄ : is_accumulation_point {s : ‚ÑÇ | f s = g s ‚àß s ‚àà U} s‚ÇÄ} 
{hs‚ÇÄ' : s‚ÇÄ ‚àà {s : ‚ÑÇ | f s = g s ‚àß s ‚àà U}} :
‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí f z = g z :=
begin
  let h : ‚ÑÇ ‚Üí ‚ÑÇ := f - g,
  have minor : ‚àÄ (z : ‚ÑÇ), z ‚àà U ‚Üí analytic_at ‚ÑÇ h z := Œª z hz, analytic_at.sub (hf z hz) $ hg z hz,
  have key : {s : ‚ÑÇ | f s = g s ‚àß s ‚àà U} = {s : ‚ÑÇ | h s = 0 ‚àß s ‚àà U} :=
  begin
    ext,
    split,
    { 
      intros hx, 
      dsimp at hx, 
      simp, split,
      exact calc h x = (f - g) x : by refl
        ... = f x - g x : by simp
        ... = f x - f x : by rw ‚Üê hx.1
        ... = 0 : by ring,
      exact hx.2,
    },
    {
      intros hx, 
      dsimp at hx, 
      simp, split,
      exact calc f x = f x - g x + g x : by simp
        ... = (f - g) x + g x : by simp
        ... = h x + g x : by refl
        ... = 0 + g x : by rw hx.1
        ... = g x : by ring,
      exact hx.2,
    },
  end,
  rw key at hs‚ÇÄ hs‚ÇÄ',
  intros z hz,
  have : h z = 0 := vanishing_if_zeros_accumulate U h s‚ÇÄ z hz,
  assumption',
  exact calc f z = f z - g z + g z : by simp
        ... = (f - g) z + g z : by simp
        ... = h z + g z : by refl
        ... = 0 + g z : by rw this
        ... = g z : by ring,
end
-/
